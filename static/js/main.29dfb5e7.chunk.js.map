{"version":3,"sources":["lib/index.js","lib/Folders.js","index.js"],"names":["Folders","this","props","folders","className","width","height","folderContentWidth","folderContentHeight","foldersLen","length","tabW","styles","tabs","backgroundColor","tab","folder","i","color","zIndex","tabPanel","overflow","style","maxWidth","direction","float","component","map","key","name","PureComponent","App","handleSubmit","e","preventDefault","value","setState","Number","state","fluidsFolders","panelLabel","onSubmit","placeholder","type","ref","element","Component","ReactDOM","render","document","getElementById"],"mappings":"iSACeA,G,6LCKH,IAAD,EAQHC,KAAKC,MANPC,EAFK,EAELA,QACAC,EAHK,EAGLA,UACAC,EAJK,EAILA,MACAC,EALK,EAKLA,OACAC,EANK,EAMLA,mBACAC,EAPK,EAOLA,oBAEIC,EAAaN,EAAQO,OACrBC,GAAQN,EAA2B,IAAlBI,EAAa,IAAWA,EACzCG,EAAS,CACbC,KAAM,CAAEC,gBAAiB,iBACzBC,IAAK,SAACC,EAAQC,GACZ,MAAO,CACLH,gBAAiBE,EAAOF,gBACxBI,MAAO,QACPb,MAAOM,EAEPQ,OAAQ,GAAKV,EAAaQ,EAAI,IAGlCG,SAAU,SAAAJ,GACR,MAAO,CACLF,gBAAiBE,EAAOF,gBACxBR,OAAQA,EACRe,SAAwB,gBAAdjB,EAA8B,OAAS,YAKvD,OACE,yBACEA,UAAU,OACVkB,MAAO,CACLC,SAAUhB,EACVD,OAAQA,EACRkB,UAAW,QAGb,yBACEpB,UAAU,2BACVkB,MAAO,CACLC,SAAUhB,GAA0CF,EACpDC,OAAQE,GAA4CF,EACpDmB,MAAO,UAGO,IAAfhB,EACC,yBAAKL,UAAWA,EAAWkB,MAAOV,EAAOQ,SAASjB,EAAQ,KACvDA,EAAQ,GAAGuB,WAGd,kBAAC,IAAD,CAAMtB,UAAWA,EAAWkB,MAAOV,EAAOC,MACxC,kBAAC,IAAD,KACGV,EAAQwB,KAAI,SAACX,EAAQC,GACpB,OACE,kBAAC,IAAD,CACEW,IAAKZ,EAAOa,KACZP,MAAOV,EAAOG,IAAIC,EAAQC,GAC1Bb,UAAU,iBAET,IACAY,EAAOa,UAKf1B,EAAQwB,KAAI,SAAAX,GACX,OACE,kBAAC,IAAD,CAAUY,IAAKZ,EAAOa,KAAMP,MAAOV,EAAOQ,SAASJ,IAChDA,EAAOU,qB,GAxENI,kBCAhBC,E,YACJ,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KAIR8B,aAAe,SAAAC,GACTA,GAAGA,EAAEC,iBACT,IAAM7B,EAAQ,EAAKA,MAAM8B,MACrB7B,EAAS,EAAKA,OAAO6B,MACzB,EAAKC,SAAS,CACZ/B,MAAOgC,OAAOhC,GACdC,OAAQ+B,OAAO/B,MATjB,EAAKgC,MAAQ,CAAEjC,MAAO,IAAKC,OAAQ,KAFlB,E,sEAgDT,IAAD,OACDiC,EAAgB,CACpB,CACEV,KAAM,OACNf,gBAAiB,UACjBY,UACE,yBAAKtB,UAAU,OAAOkB,MAAO,CAACjB,MAAO,MACnC,yBAAKD,UAAU,gCACb,4BACE,0BAAMA,UAAU,YAAhB,KACA,0BAAMA,UAAU,cAAhB,kBAKRoC,WAAY,cAIhB,OACE,oCACE,0BAAMC,SAAUxC,KAAK+B,cACnB,2BACEU,YAAY,QACZC,KAAK,OACLC,IAAK,SAAAC,GACH,EAAKxC,MAAQwC,KAGjB,2BACEH,YAAY,SACZC,KAAK,OACLC,IAAK,SAAAC,GACH,EAAKvC,OAASuC,KAGlB,4CAGF,kBAAC,EAAD,CACExC,MAAOJ,KAAKqC,MAAMjC,MAClBC,OAAQL,KAAKqC,MAAMhC,OACnBC,mBAAoB,KACpBC,oBAAqBP,KAAKqC,MAAMhC,OAChCF,UAAU,gBACVD,QAASoC,S,GA9FDO,aAqGlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.29dfb5e7.chunk.js","sourcesContent":["import Folders from \"./Folders\";\nexport default Folders;","import React, { PureComponent } from \"react\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport \"./Folders.css\";\n\nclass Folders extends PureComponent {\n  render() {\n    const {\n      folders,\n      className,\n      width,\n      height,\n      folderContentWidth,\n      folderContentHeight\n    } = this.props;\n    const foldersLen = folders.length;\n    const tabW = (width + (foldersLen - 1) * 10) / foldersLen;\n    const styles = {\n      tabs: { backgroundColor: \"rgba(0,0,0,0)\" },\n      tab: (folder, i) => {\n        return {\n          backgroundColor: folder.backgroundColor,\n          color: \"white\",\n          width: tabW,\n          // left: i * 10,\n          zIndex: 10 - foldersLen - i - 1\n        }\n      },\n      tabPanel: folder => {\n        return {\n          backgroundColor: folder.backgroundColor,\n          height: height,\n          overflow: className === \"xray-folder\" ? \"auto\" : \"hidden\"\n        };\n      }\n    };\n\n    return (\n      <div\n        className=\"wrap\"\n        style={{\n          maxWidth: folderContentWidth,\n          height: height,\n          direction: 'rtl'\n        }}\n      >\n        <div\n          className=\"folder-content-container\"\n          style={{\n            maxWidth: folderContentWidth ? folderContentWidth : width,\n            height: folderContentHeight ? folderContentHeight : height,\n            float: 'right'\n          }}\n        >\n          {foldersLen === 1 ? (\n            <div className={className} style={styles.tabPanel(folders[0])}>\n              {folders[0].component}\n            </div>\n          ) : (\n            <Tabs className={className} style={styles.tabs}>\n              <TabList>\n                {folders.map((folder, i) => {\n                  return (\n                    <Tab\n                      key={folder.name}\n                      style={styles.tab(folder, i)}\n                      className=\"side-tab tab1\"\n                    >\n                      {\" \"}\n                      {folder.name}\n                    </Tab>\n                  );\n                })}\n              </TabList>\n              {folders.map(folder => {\n                return (\n                  <TabPanel key={folder.name} style={styles.tabPanel(folder)}>\n                    {folder.component}\n                  </TabPanel>\n                );\n              })}\n            </Tabs>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Folders;\n","import React, { Component, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Folders from \"./lib\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 300, height: 400 };\n  }\n\n  handleSubmit = e => {\n    if (e) e.preventDefault();\n    const width = this.width.value;\n    let height = this.height.value;\n    this.setState({\n      width: Number(width),\n      height: Number(height)\n    });\n  };\n  //    [\n  //         {\n  //             name: \"COAG\",\n  //             backgroundColor: \"#fff5e8\",\n  //             component:\n  //                 <>\n  //                     <div className=\"fluids-table-label-container\">\n  //                         <h3>\n  //                             <span className=\"c-circle\">C</span>\n  //                             <span className=\"coag-label\">Coagulation</span>\n  //                         </h3>\n  //                     </div>\n  //                 </>,\n  //             panelLabel: \"Nutrition\"\n  //         },\n  //         {\n  //             name: \"NUTRITION\",\n  //             backgroundColor: \"#b1cbf1\",\n  //             component:\n  //                 <>\n  //                     <h3 className=\"nu-label\">\n  //                         <span className=\"n-circle\">N</span>\n  //                         <span className=\"coag-label\">Nutrition</span>\n  //                     </h3>\n  //                 </>,\n  //             panelLabel: \"NO\"\n  //         },\n  //         {\n  //             name: \"RENAL\",\n  //             backgroundColor: \"#e6bb14\",\n  //             component: <h2> EMPTY </h2>,\n  //             panelLabel: \"NO\"\n  //         },\n  //     ]\n  render() {\n    const fluidsFolders = [\n      {\n        name: \"COAG\",\n        backgroundColor: \"#fff5e8\",\n        component: (\n          <div className=\"haha\" style={{width: 300}}>\n            <div className=\"fluids-table-label-container\">\n              <h3>\n                <span className=\"c-circle\">C</span>\n                <span className=\"coag-label\">Coagulation</span>\n              </h3>\n            </div>\n          </div>\n        ),\n        panelLabel: \"Nutrition\"\n      },\n      \n    ];\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            placeholder=\"width\"\n            type=\"text\"\n            ref={element => {\n              this.width = element;\n            }}\n          />\n          <input\n            placeholder=\"height\"\n            type=\"text\"\n            ref={element => {\n              this.height = element;\n            }}\n          />\n          <button>Submit!</button>\n        </form>\n\n        <Folders\n          width={this.state.width}\n          height={this.state.height}\n          folderContentWidth={1200}\n          folderContentHeight={this.state.height}\n          className=\"fluids-folder\"\n          folders={fluidsFolders}\n        />\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}